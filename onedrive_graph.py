"""
M√≥dulo para conectar con OneDrive usando Microsoft Graph API
Utiliza device code flow para compatibilidad con Streamlit Cloud
"""

import msal
import requests
import streamlit as st
import os
from typing import Optional, Dict, Any
import pandas as pd
from io import BytesIO
import time


class OneDriveGraphConnector:
    def __init__(self, client_id: str, tenant_id: str):
        """
        Inicializa el conector de Microsoft Graph
        
        Args:
            client_id: Application (client) ID de Azure
            tenant_id: Directory (tenant) ID de Azure
        """
        self.client_id = client_id
        self.tenant_id = tenant_id
        
        # Scopes necesarios para leer archivos
        self.scopes = ["https://graph.microsoft.com/Files.Read.All"]
        
        # URL base de Microsoft Graph
        self.graph_url = "https://graph.microsoft.com/v1.0"
        
        # Configurar MSAL para device code flow (m√°s compatible con Streamlit)
        self.app = msal.PublicClientApplication(
            client_id=self.client_id,
            authority=f"https://login.microsoftonline.com/{self.tenant_id}"
        )
    
    def authenticate_device_flow(self):
        """
        Autentica usando device code flow - m√°s compatible con Streamlit Cloud
        """
        # Verificar si ya hay un token v√°lido en session_state
        if "access_token" in st.session_state:
            return st.session_state["access_token"]
        
        # Inicializar o recuperar el flow del session_state
        if "device_flow" not in st.session_state:
            # Iniciar device flow
            flow = self.app.initiate_device_flow(scopes=self.scopes)
            
            if "user_code" not in flow:
                st.error("‚ùå Error: No se pudo iniciar el flujo de autenticaci√≥n")
                return None
            
            st.session_state["device_flow"] = flow
        else:
            flow = st.session_state["device_flow"]
        
        # Mostrar instrucciones al usuario
        st.info(f"""
        üîê **Autenticaci√≥n requerida**
        
        1. Ve a: **{flow['verification_uri']}**
        2. Ingresa el c√≥digo: **{flow['user_code']}**
        3. Inicia sesi√≥n con tu cuenta Microsoft
        4. Regresa aqu√≠ y haz clic en "Verificar Autenticaci√≥n"
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Bot√≥n para verificar si la autenticaci√≥n se complet√≥
            if st.button("üîÑ Verificar Autenticaci√≥n"):
                with st.spinner("üîç Verificando autenticaci√≥n..."):
                    try:
                        result = self.app.acquire_token_by_device_flow(flow)
                        
                        if "access_token" in result:
                            st.session_state["access_token"] = result["access_token"]
                            # Limpiar el flow del session_state
                            if "device_flow" in st.session_state:
                                del st.session_state["device_flow"]
                            st.success("‚úÖ ¬°Autenticaci√≥n exitosa!")
                            st.rerun()
                            return result["access_token"]
                        elif result.get("error") == "authorization_pending":
                            st.warning("‚è≥ A√∫n no has completado la autenticaci√≥n. Completa el proceso en Microsoft y vuelve a intentar.")
                            return None
                        else:
                            st.error(f"‚ùå Error de autenticaci√≥n: {result.get('error_description', 'Error desconocido')}")
                            # Limpiar flow en caso de error
                            if "device_flow" in st.session_state:
                                del st.session_state["device_flow"]
                            return None
                    except Exception as e:
                        st.error(f"‚ùå Error inesperado: {str(e)}")
                        return None
            
            # Auto-verificaci√≥n cada 5 segundos si se muestra el c√≥digo
            if st.button("üîÑ Auto-verificar (cada 5s)"):
                placeholder = st.empty()
                for i in range(12):  # 60 segundos m√°ximo
                    with placeholder.container():
                        st.info(f"üîç Auto-verificando... Intento {i+1}/12")
                        try:
                            result = self.app.acquire_token_by_device_flow(flow)
                            
                            if "access_token" in result:
                                st.session_state["access_token"] = result["access_token"]
                                if "device_flow" in st.session_state:
                                    del st.session_state["device_flow"]
                                st.success("‚úÖ ¬°Autenticaci√≥n exitosa!")
                                st.rerun()
                                return result["access_token"]
                            elif result.get("error") != "authorization_pending":
                                st.error(f"‚ùå Error: {result.get('error_description', 'Error desconocido')}")
                                break
                        except Exception:
                            pass
                        
                        if i < 11:  # No esperar en la √∫ltima iteraci√≥n
                            time.sleep(5)
                
                placeholder.warning("‚è≥ Tiempo de espera agotado. Haz clic en 'Verificar Autenticaci√≥n' manualmente.")
        
        with col2:
            # Bot√≥n para reiniciar el proceso
            if st.button("üîÑ Generar Nuevo C√≥digo"):
                if "device_flow" in st.session_state:
                    del st.session_state["device_flow"]
                st.rerun()
        
        return None
    
    def get_user_info(self, access_token: str) -> Optional[Dict[str, Any]]:
        """
        Obtiene informaci√≥n del usuario autenticado
        
        Args:
            access_token: Token de acceso v√°lido
            
        Returns:
            Informaci√≥n del usuario o None si hay error
        """
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.get(f"{self.graph_url}/me", headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"Error obteniendo informaci√≥n del usuario: {str(e)}")
            return None
    
    def search_files(self, access_token: str, filename: str) -> Optional[Dict[str, Any]]:
        """
        Busca archivos por nombre en OneDrive
        
        Args:
            access_token: Token de acceso v√°lido
            filename: Nombre del archivo a buscar
            
        Returns:
            Informaci√≥n del archivo o None si no se encuentra
        """
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        try:
            # Buscar archivo por nombre
            search_url = f"{self.graph_url}/me/drive/search(q='{filename}')"
            response = requests.get(search_url, headers=headers)
            response.raise_for_status()
            
            data = response.json()
            files = data.get('value', [])
            
            if files:
                # Filtrar archivos exactos (no parciales)
                exact_matches = [f for f in files if f['name'].lower() == filename.lower()]
                if exact_matches:
                    return exact_matches[0]
                else:
                    return files[0]  # Fallback al primer resultado
            
            return None
            
        except requests.exceptions.RequestException as e:
            st.error(f"Error buscando archivo: {str(e)}")
            return None
    
    def download_file(self, access_token: str, file_id: str) -> Optional[bytes]:
        """
        Descarga un archivo de OneDrive
        
        Args:
            access_token: Token de acceso v√°lido
            file_id: ID del archivo a descargar
            
        Returns:
            Contenido del archivo en bytes o None si hay error
        """
        headers = {
            'Authorization': f'Bearer {access_token}'
        }
        
        try:
            download_url = f"{self.graph_url}/me/drive/items/{file_id}/content"
            response = requests.get(download_url, headers=headers)
            response.raise_for_status()
            
            return response.content
            
        except requests.exceptions.RequestException as e:
            st.error(f"Error descargando archivo: {str(e)}")
            return None
    
    def load_excel_from_onedrive(self, access_token: str, filename: str) -> Optional[pd.DataFrame]:
        """
        Carga un archivo Excel desde OneDrive como DataFrame
        
        Args:
            access_token: Token de acceso v√°lido
            filename: Nombre del archivo Excel
            
        Returns:
            DataFrame con los datos o None si hay error
        """
        try:
            # Buscar archivo
            file_info = self.search_files(access_token, filename)
            if not file_info:
                st.error(f"‚ùå Archivo '{filename}' no encontrado en OneDrive")
                return None
            
            # Descargar archivo
            file_content = self.download_file(access_token, file_info['id'])
            if not file_content:
                st.error(f"‚ùå Error descargando '{filename}'")
                return None
            
            # Leer Excel
            df = pd.read_excel(BytesIO(file_content))
            st.success(f"‚úÖ Archivo '{filename}' cargado exitosamente ({len(df)} filas)")
            
            return df
            
        except Exception as e:
            st.error(f"‚ùå Error procesando archivo Excel: {str(e)}")
            return None


def init_graph_connection() -> Optional[OneDriveGraphConnector]:
    """
    Inicializa la conexi√≥n con Microsoft Graph usando variables de entorno
    
    Returns:
        Conector configurado o None si faltan credenciales
    """
    # Intentar leer desde secrets primero (Streamlit Cloud)
    try:
        client_id = st.secrets["AZURE_CLIENT_ID"]
        tenant_id = st.secrets["AZURE_TENANT_ID"]
        # Si llegamos aqu√≠, estamos en Streamlit Cloud
        st.info("üåê Ejecut√°ndose en Streamlit Cloud")
    except:
        # Fallback para desarrollo local
        client_id = os.getenv('AZURE_CLIENT_ID')
        tenant_id = os.getenv('AZURE_TENANT_ID')
        st.info("üíª Ejecut√°ndose en entorno local")
    
    if not all([client_id, tenant_id]):
        st.warning("‚ö†Ô∏è Configuraci√≥n de Azure incompleta. Revisa las variables de entorno.")
        return None
    
    return OneDriveGraphConnector(client_id, tenant_id)


def load_spending_data() -> Optional[pd.DataFrame]:
    """
    Funci√≥n principal para cargar datos de gastos desde OneDrive
    
    Returns:
        DataFrame con datos de gastos o None si hay error
    """
    # Inicializar conexi√≥n
    connector = init_graph_connection()
    if not connector:
        return None
    
    # Autenticar usuario
    access_token = connector.authenticate_device_flow()
    if not access_token:
        st.warning("üîë Necesitas autenticarte para acceder a tus datos de OneDrive")
        return None
    
    # Obtener nombre del archivo desde configuraci√≥n
    try:
        filename = st.secrets.get("ONEDRIVE_FILENAME", "HomeSpend.xlsx")
    except:
        filename = os.getenv("ONEDRIVE_FILENAME", "HomeSpend.xlsx")
    
    # Cargar datos
    return connector.load_excel_from_onedrive(access_token, filename)
